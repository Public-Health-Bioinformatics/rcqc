<tool id="rcqc" name="Report Calc for Quality Control" version="0.1.0" refresh_on_change="True">
	<description>This tool is an interpreter for RCQC scripting language rule files.  It can text-mine documents for field labels and values, and can execute rules that manipulate these values in its memory resident data store in order to control job execution flow within a workflow engine. It easily provides basic tab-delimited, JSON and HTML reporting of the text-mined data.</description>
	<requirements>
		<requirement type="package" version="0.1.0">rcqc</requirement>
	</requirements>
    <stdio>
        <exit_code range="1:" />
    </stdio>
    <requirements>
    </requirements>
    <command interpreter="python"><![CDATA[
        rcqc.py
        -H "$html_file" 
        -f "$html_file.files_path"
        #set $sep = ''
        -i "
        #for $i, $f in enumerate($input_files)
        	$sep$f.file_name:$f.name:$f.ext
        	#set $sep = ','
        #end for
        "
        -r "$rules_file"
        
        #if $output_json
        -o "$output_json_file"
        #end if
        
	   -e "$rule_sections"
	   
        #if len($custom)
        -c "$custom_rules"
        #end if

        #if $save_rules
        -s "$save_rule_file"
        #end if
        
        #if $debug
        -d
        #end if
    ]]></command>
    
    <inputs>
		<param name="input_files" type="data" format="tabular,txt,json" multiple="true" label="Log or report file(s) to analyze"/> 
		<param name="rules_file" type="data" format="json" label="Rule file" optional="True" refresh_on_change="True" /> 

		<param name="rule_sections" type="select" label="Rule section execution" dynamic_options="get_rule_section(rules_file)" multiple="true" help="Select which sections of the rule file should be executed." />
		
		<repeat name="custom" title="Modify rule section" >
			
			<param name="rule_position" type="select" label="At rule" dynamic_options="get_rule_list()" multiple="false"  />

			<param name="drop_rule" type="boolean" label="Drop this rule" truevalue="1" falsevalue="0"/>
			<param name="rules" type="text" area="True" size="5x50" label="Add rule(s) in format: function (parameter1 parameter2 ...) ..." />
			<param name="function_list" type="select" label="Function reference"  dynamic_options="get_function_list()" help="Look up function definitions here for functions used in you rules." />
		</repeat>	
		
		<param name="save_rules" type="boolean" label="Save new rule set" help="If you customize your rule set you can save it to a new rule file" default="False" />	

		<param name="output_json" type="boolean" label="Output 'report/' namespace as json dataset" help="This can be input to a subsequent report engine" default="False" />	

		<param name="debug" type="boolean" label="Debug rule set" help="This provides more details of rule execution in the tool's View details page > Tool Standard Output log" default="False" />	
		
    </inputs>
    
	<configfiles>
		<!-- Rule file contains [section name]:[row]\t[0|1]\t[plain text rules]  #replace(r'"',r'\"').replace('\n',r'\n') -->
		<configfile name="custom_rules">#
#for $rule_choice in $custom
$rule_choice.rule_position	$rule_choice.drop_rule	$rule_choice.rules.encode('base64').replace('\n','')
#end for 
</configfile>
	</configfiles>

    <outputs>
		<data format="html" name="html_file" label="rcqc_folder"/>
		<data name="output_json_file" format="json" label="rcqc_calc_json">
			<filter>(output_json == True)</filter>
		</data>
		<data name="save_rule_file" format="json" label="rcqc_rule_file">
			<filter>(save_rules == True)</filter>
		</data>    	
    </outputs>

	<code file="rcqc_form.py" />
	
    <help><![CDATA[
===============================
Report Calc for Quality Control
===============================
Report Calc for Quality Control (RCQC) is basically an interpreted scripting language that can text-mine documents for field labels and values, and can execute rules that manipulate these values in its memory resident data store in order to create reports and to control job execution flow within a workflow engine. It provides basic tab-delimited, JSON and HTML reporting of any portion of its data store.  RCQC liaises with the overarching workflow engine via its own exit codes. The design goal is to allow easy adjustment of rules and parameters that affect workflow processing.

Rules can locate and parse numeric, boolean and other data from the input files which can be in text, tabular and JSON format.  Each rule is expressed as a function followed by parameters, where each parameter can also be a function with parameters.  The rule file itself is coded in JSON in infix notation as rules of form "function(parameter1 parameter2 ...).  Rules are executed from top to bottom. 

If after all the rules have processed, a rule has set a namespace variable called **"report/job/status"** to **"fail"**, that will cause a tool exit code of 1 to be returned to Galaxy after the report is written.  This enables a job to be marked in an error state as a result of quality control reporting. (Currently however one cannot make other workflow apps conditional on earlier Report Calc success, so one cannot stop other parts of a workflow early.)

More details on the RCQC language and interpreter are available at https://github.com/public-health-bioinformatics/rcqc/wiki

    ]]></help>
</tool>
